(* 程序 *)
Program::={Statement}
(* 语句和声明 *)
Statement::= 
  BlockStatement|
  VariableStatement|
  EmptyStatement|
  ExpressionStatment|
  IfStatement|
  BreakableStatement|
  ContinueStatement|
  BreakStatement|
  ReturnStatement|
  WithStatement|
  LabelledStatement|
  ThrowStatement|
  TryStatement|
  DebuggerStatement

Declaration::= 
  HoistableDeclaration|
  ClassDeclaration|
  LexicalDeclaration

(* ================== *)
(* 可提升声明 *)
HoistableDeclaration::=
  FunctionDeclaration|
  GeneratorDeclaration|
  AsyncFunctionDeclaration|
  AsyncGeneratorDeclaration
(* 可使用break的声明 *)
BreakableStatement::=
  IterationStatement|
  SwitchStatement|
(* 块声明 *)
BlockStatement::=Block

Block::=
  "{" [StatementList] "}"
(* 声明列表 *)
StatementList::=
  StatementListItem|
  StatementList StatementListItem

StatementListItem::=
  Statement|
  Declaration
(* 词法声明 *)
LexicalDeclaration::=
  LetOrConst,BindingList;

LetOrConst::="let"|"const"

BindingList::=
  LexicalBinding|
  BindingList,LexicalBinding

LexicalBinding::=
  BindingIdentifier [Initializer]|
  BindingPattern Initializer
(* 变量声明 *)
VariableStatement::=
  "var" VariableDeclarationList;

VariableDeclarationList::=
  VariableDeclaration|
  VariableDeclarationList,VariableDeclaration

VariableDeclaration::=
  BindingIdentifier [Initializer]|
  BindingPattern Initializer

BindingPattern::=
  ObjectBindingPattern|
  ArrayBindingPattern

ObjectBindingPattern::=
  "{" "}"|
  "{" BindingRestProperty "}"|
  "{" BindingPropertyList "}"|
  "{" BindingPropertyList,[BindingRestProperty] "}"

ArrayBindingPattern::=
  "[" [Elision] [BindingRestElement] "]"|
  "[" BindingElementList "]"|
  "[" BindingElementList,[Elision] [BindingRestElement] "]"

(* 剩余属性 *)
BindingRestProperty::=
  "..." BindingIdentifier

BindingPropertyList::=
  BindingProperty|
  BindingPropertyList,BindingProperty

BindingElementList::=
  BindingElisionElement|
  BindingElementList,BindingElisionElement

BindingElisionElement::=ElisionoptBindingElement

BindingProperty::=SingleNameBinding

PropertyName::=BindingElement

BindingElement::=
  SingleNameBinding|
  BindingPattern [Initializer]

SingleNameBinding::=
  BindingIdentifier [Initializer]

BindingRestElement::=
  "..." BindingIdentifier|
  "..." BindingPattern
(* 空语句 *)
EmptyStatement::=";"

ExpressionStatement::=
  [lookahead ∉ { "{", "function", "async" (? no LineTerminator here ?) "function", "class", "let" "[" }]
  Expression ";"

IfStatement::=
  if "(" Expression ")" Statement "else" Statement|
  if "(" Expression ")" Statement

IterationStatement::=
  "do" Statement "while" "(" Expression ")" ";"|
  "while" "(" Expression ")" Statement|
  "for" "(" [lookahead ≠ "let" "["] [Expression] ";" [Expression] ";"[Expression] ";")
    Statement|
  "for" "(" "var" VariableDeclarationList ";" [Expression] ";" [Expression])
    Statement
  "for" "(" LexicalDeclaration, [Expression] ";" [Expression] ")"
    Statement
  "for" "(" [lookahead ≠ "let" "["] LeftHandSideExpression "in" Expression ")"
    Statement
  "for" "(" "var" ForBinding "in" Expression ")" 
    Statement
  "for" "(" ForDeclaration "in" Expression ")"
    Statement
  "for" "(" [lookahead ≠ "let"] LeftHandSideExpression "of" AssignmentExpression ")"
    Statement
  "for" "(" "var" ForBinding "of" AssignmentExpression ")"
    Statement
  "for" "(" ForDeclaration "of" AssignmentExpression ")"
    Statement
  "for" "await" "(" [lookahead ≠ "let"] LeftHandSideExpression "of" AssignmentExpression ")"
    Statement
  "for" "await" "(" "var" ForBinding "of" AssignmentExpression ")"
    Statement
  "for" "await" "(" ForDeclaration "of" AssignmentExpression ")"
    Statement

ForDeclaration::=LetOrConstForBinding

ForBinding::=
  BindingIdentifier|
  BindingPattern

ContinueStatement::
  "continue" ";"|
  "continue" [no LineTerminator here] LabelIdentifier ";"

BreakStatement::=
  "break" ";"
  "break" [no LineTerminator here] LabelIdentifier ";"

ReturnStatement::=
  "return" ";"|
  "return" [no LineTerminator here] Expression ";"

WithStatement::=
  "with" "(" Expression ")" Statement

SwitchStatement::=
  "switch" "(" Expression ")" CaseBlock

CaseBlock::=
  "{" [CaseClauses] "}"|
  "{" [CaseClauses] DefaultClause [CaseClauses] "}"

CaseClauses::=
  CaseClause|
  CaseClauses CaseClause

CaseClause::=
  "case" Expression ":" [StatementList]

DefaultClause::=
  default ":" [StatementList]

LabelledStatement::=LabelIdentifier ":" LabelledItem

LabelledItem::=
  Statement|
  FunctionDeclaration

ThrowStatement::=
  "throw" [no LineTerminator here] Expression ";"

TryStatement::=
  "try" Block Catch|
  "try" Block Finally|
  "try" Block Catch Finally

Catch::=
  "catch" "(" CatchParameter) Block|
  "catch" Block

Finally::=
  "finally" Block

CatchParameter::=
  BindingIdentifier|
  BindingPattern

DebuggerStatement:"debugger" ";"